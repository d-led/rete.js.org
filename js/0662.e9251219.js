(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["0662"],{"0662":function(o,e,t){"use strict";t.r(e);var n=function(){var o=this,e=o.$createElement,t=o._self._c||e;return t("div",{staticClass:"sockets"},[t("h1",[o._v("Сокеты")]),t("p",[o._v("Сокеты используются для определения того, какие входы и выходы могут быть подключены между собой. \nОни отвечают за тип данных, которые могут быть переданы с одного узла в другой.")]),t("p",[o._v("Прежде всего, вы должны объявить все сокеты, которые будут использоваться в редакторе.")]),t("Code",{attrs:{source:"sockets"}}),t("p",[o._v("Переданый параметр должен быть уникальным. Согдасно нему будет создан CSS класс в формате kebb-case, к которому вы можете применить стили.")]),t("Code",{attrs:{lang:"css",source:"socketCSS"}}),t("p",[o._v(" В результате вы можете подключить только входы и выходы с одинаковыми разъемами. \nХотя могут быть ситуации, когда нужно подключать разные сокеты. Для этого есть метод `combineWith`:")]),t("Code",{attrs:{source:"combineSocket"}}),t("p",[o._v("Теперь вы можете подключить `numSocket` к `anyTypeSocket`, но не наоборот")])],1)},c=[],s=t("2877"),i=function(o){o.options.code||(o.options.code={}),o.options.code["sockets"]="const numSocket = new Rete.Socket('Number');\nconst strSocket = new Rete.Socket('String');"},p=i,u=function(o){o.options.code||(o.options.code={}),o.options.code["socketCSS"]=".socket.number {\n  background: #96b38a\n}"},k=u,a=function(o){o.options.code||(o.options.code={}),o.options.code["combineSocket"]="const anyTypeSocket = new Rete.Socket('Any type');\nnumSocket.combineWith(anyTypeSocket);"},r=a,S={},d=Object(s["a"])(S,n,c,!1,null,null,null);"function"===typeof p&&p(d),"function"===typeof k&&k(d),"function"===typeof r&&r(d),d.options.__file="index.vue";e["default"]=d.exports}}]);
//# sourceMappingURL=0662.e9251219.js.map